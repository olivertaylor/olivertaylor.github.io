#+TITLE: Optical Adjustment of Mixed Fonts in Emacs
#+AUTHOR: Oliver Taylor
#+CATEGORY: Emacs

=2021-03-24=

Whether for functional or aesthetic purposes it is nice to be able to mix
[[https://en.wikipedia.org/wiki/Typeface#Proportion][proportional fonts]] with [[https://en.wikipedia.org/wiki/Monospaced_font][monospace fonts]] in the same document (this document
for example does that). Since text editors edit and display plain text, they
are usually configured to only display one font at a time, and leave the
process of defining multiple fonts to other tools (like [[https://pandoc.org][Pandoc]]).

Emacs can in fact display more than one font at a time in any given buffer.
There are many ways of accomplishing this (naturally) but I use the [[https://protesilaos.com/modus-themes/][Modus
Themes]] and generally don't have to think about it, the theme does the heavy
lifting for me.

Getting this working requires defining three different fonts, a =default= font,
a =variable-pitch= font, and a =fixed-pitch=. Instructions for doing this [[https://protesilaos.com/modus-themes/#h:defcf4fc-8fa8-4c29-b12e-7119582cc929][can be
found in the themes' documentation]]. It recommends this:

#+begin_src emacs-lisp
;; Main typeface
(set-face-attribute 'default nil :family "DejaVu Sans Mono" :height 110)

;; Proportionately spaced typeface
(set-face-attribute 'variable-pitch nil :family "DejaVu Serif" :height 1.0)

;; Monospaced typeface
(set-face-attribute 'fixed-pitch nil :family "DejaVu Sans Mono" :height 1.0)
#+end_src

That documentation includes the note:

#+begin_quote
Note the differences in the :height property. The default face must specify an
absolute value, which is the point size × 10. So if you want to use a font at
point size 11, you set the height to 110. Whereas every other face must have
a value that is relative to the default, represented as a floating point (if
you use an integer, then that means an absolute height). This is of paramount
importance: it ensures that all fonts can scale gracefully when using
something like the text-scale-adjust command which only operates on the base
font size (i.e. the default face’s absolute height).
#+end_quote

Can you sense the cryptic foreshadowing?


* A Problem is Revealed

I've used the above method to set fonts in Emacs for a long time, and it works
great. But the more I use Emacs the more I notice a problem. Most variable
width fonts are /optically/ smaller (meaning they /look/ smaller) than their
monospace counterparts, even those that are designed to be used together.
Take, for example, this screenshot of an article from an RSS feeds I'm
subscribed to (fonts are IBM Plex Mono and IBM Plex Serif):

[[./img/elfeeed-mixed-font-sample.png]]

Despite the two fonts being set to the same exact size, the monospace font
appears to be larger than the proportional font.

So how do we adjust the size of only the variable-pitch font so that it better
matches the optical size of the default/fixed-pitch font?

If you're an arrogant copypasta dotfile hacker (me) you're probably thinking
the solution is easy. "Simple!" you say, "just define a slightly larger size
for the proportional font." Something like:

#+begin_src emacs-lisp
(set-face-attribute 'default nil :family "IBM Plex Mono" :height 120)
(set-face-attribute 'variable-pitch nil :family "IBM Plex Serif" :height 1.1)
(set-face-attribute 'fixed-pitch nil :family "IBM Plex Mono" :height 1.0)
#+end_src

But now any time you're in variable pitch mode you'll notice that your fixed
width fonts are too large, they will have been scaled-up by the same amount as
your variable pitch font.

"Ok fine, here's another stupid idea" you say.

#+begin_src emacs-lisp
(set-face-attribute 'default nil :family "IBM Plex Mono" :height 130)
(set-face-attribute 'variable-pitch nil :family "IBM Plex Sans" :height 1.1)
(set-face-attribute 'fixed-pitch nil :family "IBM Plex Mono" :height 130)
#+end_src

This will work great in variable pitch mode, but you'll find that
=text-scale-adjust= doesn't actually resize your fixed width font at all.

* This Way Madness Lies

Be warned brave adventurer, this is a [[https://xkcd.com/456/][cautionary tale]].

To understand why both of the above approaches fail you need to know a little
bit about how [[https://git.savannah.gnu.org/cgit/emacs.git/tree/lisp/face-remap.el][the code]] for =variable-pitch-mode= and =text-scale-adjust= works.
Both commands work the same way, they alter the "default" face /in the current
buffer/. =variable-pitch-mode= (which is a wrapper around =buffer-face-mode=)
simply replaces the default face with the variable-pitch face. The function
which actually does this looks like:

#+begin_src emacs-lisp
(face-remap-add-relative 'default buffer-face-mode-face)
;; by default, the buffer-face-mode-face is the variable-pitch face.
#+end_src

=text-scale-adjust= basically works the same way, but it only modifies the
height property. The actual code is pretty complex but a dramatically
simplified version might look like this:

#+begin_src emacs-lisp
(face-remap-add-relative 'default :height 1.1)
#+end_src

It is also important to understand that if you define a relative (floating
point) value for a font height /it is always based on the default font/. So when
=buffer-face-mode= or =text-scale-adjust= changes the value of your default font
your fixed-width font's inherited properties also change.

Which is why this:

#+begin_src emacs-lisp
(set-face-attribute 'default nil :family "IBM Plex Mono" :height 120)
(set-face-attribute 'variable-pitch nil :family "IBM Plex Serif" :height 1.1)
(set-face-attribute 'fixed-pitch nil :family "IBM Plex Mono" :height 1.0)
#+end_src

Results in fixed-width fonts that are too large in variable pitch mode.

And this:

#+begin_src emacs-lisp
(set-face-attribute 'default nil :family "IBM Plex Mono" :height 130)
(set-face-attribute 'variable-pitch nil :family "IBM Plex Sans" :height 1.1)
(set-face-attribute 'fixed-pitch nil :family "IBM Plex Mono" :height 130)
#+end_src

Results in your fixed-width fonts not scaling at all when using =text-scale-adjust=.

-----

But all of the above experiments are doomed to failure anyway because these
settings effect /all frames and buffers/. What we need is a way to modify the
faces on a buffer-by-buffer basis so that we can optically adjust the
variable- and fixed-pitch faces with mode hooks.

* The Solution

Once I read the source code for =variable-pitch-mode= and =text-scale-adjust= I
found the solution was staring me in the face (note to self: when you're stuck
/read the source code/). 

Adjusting faces on a buffer-by-buffer basis is exactly that the function
=face-remap-add-relative= is designed to do. So the simplest working example of
a function to do this might be:

#+begin_src emacs-lisp
(defun scale-up-variable-pitch-face ()
  "In the current buffer, scale variable-pitch up, fixed-pitch down."
  (interactive)
  (face-remap-add-relative 'variable-pitch :height 1.1)
  (face-remap-add-relative 'fixed-pitch :height 0.9))
#+end_src

This solution is great because it applies only to the current buffer, can be
called from a variable pitch mode hook, and works flawlessly with the text
scale adjust commands.

However, this should really be a minor mode. And while we're at it, wouldn't
it be much simpler to just say "Hey, I want the monospace fonts to be this
size and the variable-pitch font to be this size" and let Emacs figure out all
the scaling for us? This is Emacs! Of course you can do that!

Below is a working example that fulfills the following goals:

- Lets you define monospace and variable fonts, and their sizes by setting
  variables.
- Sets the variable- and fixed-width sizes to relative values so
  =text-scale-adjust= works as it should.
- Creates a minor mode that remaps the sizes of the variable- and fixed-width
  sizes in the current buffer to optically adjust the fonts according to the
  sizes you've specified in the variables.
- Adds a hook for =buffer-face-mode= that enables the minor mode. (You'll
  likely want to also add hooks in places where variable-with fonts are used
  but =variable-pitch-mode= is not used, for example in Elfeed and EWW)

#+begin_src emacs-lisp
;; Settings

(setq oht-fonts-monospace "IBM Plex Mono")
(setq oht-fonts-variable  "IBM Plex Serif")
(setq oht-fonts-monospace-size 12)
(setq oht-fonts-variable-size  14)

(defvar oht-fonts-monospace nil
  "Monospace font to be used for the default and fixed-pitch faces.")

(defvar oht-fonts-variable 
  "Variable font to to used for the variable-pitch face.")

(defvar oht-fonts-monospace-size 12
  "Font size, as an integer, to be used for the default and fixed-pitch sizes.

This value will be multiplied by 10, so 12 will become 120. This is to comply
with Emacs' set-face-attribute requirements.")

(defvar oht-fonts-variable-size 14
  "Font size, as an integer, to be used for the variable-pitch size.

This value will be used to determine a relative (float) size based on the default
size. So if your default size is 12 and your variable size is 14 the derived
relative size will be 1.16.")


;;; Set fonts and their sizes

(set-face-attribute 'default nil
		    :family oht-fonts-monospace
		    :height (* oht-fonts-monospace-size 10))
(set-face-attribute 'fixed-pitch nil
		    :family oht-fonts-monospace
		    :height 1.0 )
(set-face-attribute 'variable-pitch nil
		    :family oht-fonts-variable :height 1.0)


;;; Larger Variable Pitch Mode

;; A minor mode to scale the variable-pitch face up to the height defined in
;; ‘oht-fonts-variable-size’ and the fixed-pitch face down to the height
;; defined in ‘oht-fonts-monospace-size’, buffer locally. This mode should
;; be enabled wherever you want to adjust face sizes, perhaps with a hook.

(make-variable-buffer-local
 (defvar larger-variable-pitch-mode-status nil
   "Status of the larger-variable-pitch-mode"))

(make-variable-buffer-local
 (defvar variable-pitch-remapping nil
   "variable-pitch remapping cookie for larger-variable-pitch-mode."))

(make-variable-buffer-local
 (defvar fixed-pitch-remapping nil
   "fixed-pitch remapping cookie for larger-variable-pitch-mode"))

(defun larger-variable-pitch-mode-toggle ()
  (setq larger-variable-pitch-mode-status (not larger-variable-pitch-mode-status))
  (if larger-variable-pitch-mode-status
      (progn
	(setq variable-pitch-remapping
	      (face-remap-add-relative 'variable-pitch
				       :height (/ (float oht-fonts-variable-size)
						  (float oht-fonts-monospace-size))))
	(setq fixed-pitch-remapping 
	      (face-remap-add-relative 'fixed-pitch
				       :height (/ (float oht-fonts-monospace-size)
						  (float oht-fonts-variable-size))))
	(force-window-update (current-buffer)))
    (progn
      (face-remap-remove-relative variable-pitch-remapping)
      (face-remap-remove-relative fixed-pitch-remapping))))

(define-minor-mode larger-variable-pitch-mode
  "Minor mode to scale the variable- and fixed-pitch faces up and down."
  :init-value nil
  :lighter " V+"
  (larger-variable-pitch-mode-toggle))

(defun oht-fonts-buffer-face-hook ()
  "Activate and deactivate larger-variable-pitch-mode minor mode."
  (if buffer-face-mode
      (larger-variable-pitch-mode 1)
    (larger-variable-pitch-mode -1)))


;; Make this mode the default whenever entering buffer-face-mode
(add-hook 'buffer-face-mode-hook 'oht-fonts-buffer-face-hook)

;; You may also want to add your own hooks for modes that use variable-width
;; fonts but don't use buffer-face-mode (elfeed).
#+end_src

* Conclusion

With the above in place you'll be able to optically adjust your font sizes
with simple variables in such a way that they all look great, and have the
same relative size to each other in both =variable-pitch-mode= and when using
the =text-scale-adjust= commands.

With all that done, take a look at the same screenshot of an article from my
RSS feeds:

[[./img/adjusted-elfeeed-mixed-font-sample.png]]

Much better.
